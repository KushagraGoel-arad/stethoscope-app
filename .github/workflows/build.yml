name: Package application

on:
  push:
    branches:
      - 'dhananjay-build-test'


jobs:


  build-and-package-windows:
    # if: ${{ github.event.inputs.build_type == 'all' || github.event.inputs.build_type == 'windows' }}
    outputs: 
      version_number: ${{ steps.extract_version.outputs.version}}
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: goSprinto/stethoscope-app
          ref: 'dhananjay-build-test'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ runner.home }}/.cache/electron
            ${{ runner.home }}/.cache/electron-builder
          key: windows-latest-dependencies-${{ hashFiles('**/yarn.lock') }}

      - name: Build and Package for Windows
        run: |
          yarn build:windows
      
      - name: Sign
        shell: powershell
        env:
          WINDOZE_CERT_DATA: ${{ secrets.P12FILE }}
          WINDOZE_CERT_PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          $ErrorActionPreference = "Stop"
          # Get some things for cert opts
          $version = (Get-Content package.json | ConvertFrom-Json).version
          $file = -join($pwd, "/", "dist/DrSprinto Setup ",$version,".exe");
          $temp_dir = $env:TMP
          $cert_data = $env:WINDOZE_CERT_DATA
          $cert_path = "$temp_dir\lando.windoze.p12"
          $cert_password = $env:WINDOZE_CERT_PASSWORD
          $cert_secure_password = $null
          $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\x64\signtool.exe"
          $signtool2022 = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe"
          # Throw error if file does not exist
          if (!(Test-Path "$file"))
          {
            throw "$file does not exist"
          }
          # Decode and dump to temp file
          If (!(Test-Path $cert_path)) {
            Write-Output "Dumping cert to $cert_path..."
            $bytes = [Convert]::FromBase64String($cert_data)
            [IO.File]::WriteAllBytes($cert_path, $bytes)
          }
          # Use more recent signtool if we can
          If (Test-Path $signtool2022) {
            $signtool = "$signtool2022"
          }
          # Verify the cert and password are good
          Write-Output "Verifying cert is good to go..."
          $cert_secure_password = ConvertTo-SecureString $cert_password -AsPlainText -Force
          Import-PfxCertificate -FilePath "$cert_path" -Password $cert_secure_password -CertStoreLocation "Cert:\LocalMachine\My"
          # If we get this far we should be good!
          Write-Output "We can sign!"
          # Sign
          Write-Output "Trying to sign $file with $signtool..."
          & $signtool sign -f "$cert_path" -p "$cert_password" -fd sha256 /sha1 ${{ secrets.SHA1KEY }} -tr "http://timestamp.comodoca.com/?td=sha256" -td sha256 $env:OPTIONS -as -v "$file"
        
        
      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Dist-windows
          path: dist
      
      
      - name: Get version from package.json
        id: extract_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT  
                
  upload-to-s3-windows:
    if: ${{ github.event.inputs.build_type == 'all' || github.event.inputs.build_type == 'windows' }} 
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [build-and-package-windows]
    
    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::426216900398:role/github-actions-sprinto-repo-role
          aws-region: us-west-1
    
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: Dist-*
          merge-multiple: true
          
      - name: Push artifacts to S3
        run: |
            mkdir artifacts && \
            cp dist/*.{yml,exe} artifacts/ && \
            aws s3 sync artifacts s3://drsprinto-build/${{ needs.build-and-package-windows.outputs.version_number }}/  
            

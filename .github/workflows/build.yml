name: Package application

on:
  push:
    branches:
      - 'dhananjay-build-test'

jobs:
  sign-windows-executable:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: goSprinto/stethoscope-app
          ref: 'dhananjay-build-test'

      # Compile a simple "Hello World" program and create the example.exe file
      - name: Compile Hello World program
        run: |
            Add-Content -Path example.txt -Value "Hello, world!"
            Rename-Item -Path example.txt -NewName example.exe
          
      # Start PowerShell as Administrator
      # - name: Start PowerShell as Administrator
      #   run: Start-Process powershell -Verb runAs

      # Import Windows certificate
      # - name: Import Windows certificate
      #   env:
      #     WINDOWS_CERTIFICATE: ${{ secrets.P12FILE }}
      #     WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.PASSWORD }}
      #   run: |
      #     Start-Process powershell -Verb runAs
      #     New-Item -ItemType directory -Path certificate
      #     Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
      #     certutil -decode certificate/tempCert.txt certificate/certificate.pfx
      #     Remove-Item -Path certificate -Include tempCert.txt
      #     Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)
      
      # # Sign example.exe with signtool
      # - name: Sign example.exe with signtool
      #   run: |
      #     "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign /f "certificate/certificate.pfx" /p ${{ secrets.P12_PASSWORD }} /tr http://timestamp.sectigo.com /td sha256 /fd sha256 /sha1 ${{ secrets.SHA1KEY }} "example.exe"
      
      # Save artifacts
      # - name: Save artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: Dist-windows
      #     path: dist
    
      - name: Sign
        shell: powershell
        env:
          FILE: "example.exe"
          WINDOZE_CERT_DATA: ${{ secrets.P12FILE }}
          WINDOZE_CERT_PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          $ErrorActionPreference = "Stop"

          # Get some things for cert opts
          $file = -join($pwd, "/", $env:FILE);
          $temp_dir = $env:TMP
          $cert_data = $env:WINDOZE_CERT_DATA
          $cert_path = "$temp_dir\lando.windoze.p12"
          $cert_password = $env:WINDOZE_CERT_PASSWORD
          $cert_secure_password = $null
          $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\x64\signtool.exe"
          $signtool2022 = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe"

          # Throw error if file does not exist
          if (!(Test-Path "$file"))
          {
            throw "$file does not exist"
          }

          # Decode and dump to temp file
          If (!(Test-Path $cert_path)) {
            Write-Output "Dumping cert to $cert_path..."
            $bytes = [Convert]::FromBase64String($cert_data)
            [IO.File]::WriteAllBytes($cert_path, $bytes)
          }

          # Use more recent signtool if we can
          If (Test-Path $signtool2022) {
            $signtool = "$signtool2022"
          }

          # Verify the cert and password are good
          Write-Output "Verifying cert is good to go..."
          $cert_secure_password = ConvertTo-SecureString $cert_password -AsPlainText -Force
          Import-PfxCertificate -FilePath "$cert_path" -Password $cert_secure_password -CertStoreLocation "Cert:\LocalMachine\My"

          # If we get this far we should be good!
          Write-Output "We can sign!"

          # Sign and verify
          Write-Output "Trying to sign $file with $signtool..."
          & $signtool sign -f "$cert_path" -p "$cert_password" -fd sha256 /sha1 ${{ secrets.SHA1KEY }} -tr "http://timestamp.comodoca.com/?td=sha256" -td sha256 -as -v "$file"
          Write-Output "Verifying $file has been signed with the signtool..."
          & $signtool verify -pa -v "$file"
